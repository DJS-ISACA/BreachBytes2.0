from flask import Flask, render_template, request, redirect, url_for, session, jsonify
import json
from functools import wraps
from datetime import datetime
import requests
import sys

app = Flask(__name__)
app.secret_key = 'Hy7x$P9q#mZ3vF2bL8kR1wJ6cN4tA5sE'

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
@login_required
def index():
    return render_template('profile.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        
        with open('users.json', 'r') as f:
            users = json.load(f)
        
        if username in users and users[username]['password'] == password:
            session['username'] = username
            return redirect(url_for('index'))
        else:
            return render_template('login.html', error='Invalid username or password')
    
    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        security_question = request.form['security_question']
        security_answer = request.form['security_answer']
        user_agent = request.headers.get('User-Agent')
        creation_date = datetime.now().isoformat()
        
        # Check if username contains only letters and numbers
        if not username.isalnum():
            return render_template('signup.html', error='Username must contain only letters and numbers')
        
        with open('users.json', 'r') as f:
            users = json.load(f)
        
        if username in users:
            return render_template('signup.html', error='Username already exists')
        
        users[username] = {
            'password': password,
            'security_question': security_question,
            'security_answer': security_answer,
            'user_agent': user_agent,
            'creation_date': creation_date,
            'blocked_by': ["priya_sharma23"]
        }
        
        with open('users.json', 'w') as f:
            json.dump(users, f, indent=4)
        
        return redirect(url_for('login'))
    return render_template('signup.html')

@app.route('/explore')
@login_required
def explore():
    username = session.get('username')
    try:
        response = requests.get(f'http://localhost:5000/api/v0/check_blocked/{username}')
        if response.json().get('blocked'):
            return render_template('blocked.html')
        else:
            return render_template('unblocked.html')
    except:
        return render_template('blocked.html')

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('login'))

@app.route('/api/v0/check_blocked/<username>', methods=['GET'])
def check_blocked(username):
    with open('users.json', 'r') as f:
        users = json.load(f)

    if username in users:
        blocked = len(users[username]['blocked_by']) > 0
        return jsonify({'blocked': blocked})
    
    return jsonify({'blocked': False})

@app.route('/api', methods=['GET'])
@app.route('/api/v0', methods=['GET'])
def api():
    return render_template('api.html')


@app.route('/api/v0/users', methods=['GET'])
def get_users():
    with open('users.json', 'r') as f:
        users = json.load(f)
    usernames = list(users.keys())
    return jsonify(usernames)

@app.route('/api/v0/users/<username>', methods=['GET', 'PATCH'])
def get_user(username):
    if request.method == 'GET':
        if not request.data:
            return jsonify({"error": "Expected JSON data", "parameters": ["password"]}), 400

        data = request.get_json()

        if not data or 'password' not in data:
            return jsonify({"error": "Expected a password parameter"}), 400

        with open('users.json', 'r') as f:
            users = json.load(f)

        if username in users and users[username]['password'] == data['password']:
            return jsonify(users[username])
        else:
            return jsonify({"error": "Authorization Denied!"}), 401

    elif request.method == 'PATCH':
        if not request.data:
            return jsonify({"error": "Expected dev_token, password, and blocked_by parameters"}), 400

        data = request.get_json()

        if not data or 'dev_token' not in data or 'blocked_by' not in data or 'password' not in data:
            return jsonify({"error": "Expected dev_token, password, and blocked_by parameters"}), 400

        with open('users.json', 'r') as f:
            users = json.load(f)

        if username not in users:
            return jsonify({"error": "User not found"}), 404

        # Check dev_token and password
        if data['dev_token'] != 'jF8r5m7D3sV9cB2pW1qT6hL0kYzX4eA8uN9gR3tQ2iF7xO6vB1p':
            return jsonify({"error": "Invalid Token!"}), 401

        if users[username]['password'] != data['password']:
            return jsonify({"error": "Authorization Denied!"}), 401

        # Update blocked_by field
        users[username]['blocked_by'] = data['blocked_by']

        with open('users.json', 'w') as f:
            json.dump(users, f, indent=4)

        return jsonify({"message": "User updated successfully"}), 200


if __name__ == '__main__':
    app.run(debug=True, port=5005, host='0.0.0.0')